<추가 객체 문법>
 - 단축 속성
  - 키 이름과 값으로 쓰이는 변수의 이름이 같은 경우
    단축 구문을 사용할 수 있음


 - 단축 메서드
  - 메서드 선언 시 function 키워드 생략 가능


 - 계산된 속성
  - 키가 대괄호([])로 둘러싸여 있는 속성
    -> 고정된 값이 아닌 변수 값을 사용할 수 있음


 - !!! 구조 분해 할당 !!! (가장 중요)
  - 배열 또는 객체를 분해하여 객체 속성을 변수에 쉽게 할당할 수 있는 문법
  ```
  const userInfo = {
      firstName: 'Alice',
      userId: 'alice123',
      email: 'alice123@gmail.com'
    }

  // 이렇게 선언하는 것을
  // const firstName = userInfo.firstName
  // const userId = userInfo.userId
  // const email = userInfo.email

  // 이렇게 하는 것이 구조 분해 할당 
  const { firstName } = userInfo
  const { userId } = userInfo
  const { email } = userInfo

  // 더 간단하게 하면 이렇게 가능
  const { firstName, userId, email } = userInfo
  ```

  ```
  // 구조 분해 할당 활용 - "함수 매개변수"
  function printInfo({ name, age, city }) {
    console.log(`이름: ${name}, 나이: ${age}, 도시: ${city}`)
  }

  const person = {
    name: 'Bob',
    age: 35,
    city: 'London',
  }

  // 함수 호출 시 객체를 구조 분해하여 함수의 매개변수로 전달
  printInfo(person)
  ```

 - Object with '전개 구문'
  - 객체 복사
   - 객체 내부에서 객체 전개 (풀어서 전개된다.)

  - 얕은 복사에서 활용 가능
  ```
  const obj = { b: 2, c: 3, d: 4 }
  const newObj = { a: 1, ...obj, e: 5 }
  console.log(newObj) // {a: 1, b: 2, c: 3, d: 4, e: 5}
  ```


 - 유용한 객체 메서드
  - Object.keys(객체) - 객체의 키를 배열로 반환
  - Object.values(객체) - 객체의 값을 배열로 반환


 - Optional chaining ('?.')
  - 속성이 없는 중첩 객체를 에러 없이 접근할 수 있는 방법
  - 만약 참조 대상이 null 또는 undefined라면 에러가 발생하는 것 대신 평가를 멈추고 undefined를 반환

  - 만약 Optional chaining을 사용하지 않는다면 '&&' 연산자를 사용해야 함

  - 장점
   - 참조가 누락될 가능성이 있는 경우 연결된 속성으로 접근할 때 더 짧고 간단한 표현식을 작성할 수 있음
   - 어떤 속성이 필요한지에 대한 보증이 확실하지 않는 경우에 객체의 내용을 보다 편리하게 탐색할 수 있음
   *) 자바스크립트로 API 다룰 때 요놈 잘 활용하면 유용할 것이다.

  - 주의사항
   - Optional chaining은 존재하지 않아도 괜찮은 대상에만 사용해야함 (남용 X)
   - 왼쪽 평가대상이 없어도 괜찮은 경우에만 선택적으로 사용
   - ! 중첩 객체를 에러없이 접근하는 것이 궁극적인 사용 목적이기 때문 ! 

   - Optional chaining 앞의 변수는 반드시 선언되어 있어야함

   Optional chaining 정리 (37p)
    1. obj?.prop
     - obj가 존재하면 obj.prop을 반환하고, 그렇지 않으면 undefined를 반환
    
    2. obj?.[prop]
     - obj가 존재하면 obj[prop]을 반환하고, 그렇지 않으면 undefined를 반환

    3. obj?.method[]
     - obj가 존재함ㄴ obj.method()를 호출하고, 그렇지 않으면 undefined를 반환

    -> !! '?' 왼쪽의 존재 여부를 따지는 것이다 !! 오른쪽 아님 주의
