<NaN을 반환하는 경우>
 1. 숫자로서 읽을 수 없음 -> (Number(undefined))
 2. 결과가 허수인 수학 계산식 -> (Math.sqrt(-1))
 3. 피연산자가 NaN일 때 -> (7 ** NaN)
 4. 정의할 수 없는 계산식 -> (0 * Infinity)
 5. 문자열을 포함하면서 덧셈이 아닌 계산식 -> ('가' / 3)

<null & undefined>
 '값이 없음'에 대한 표현이 null과 undefined인 이유 -> 결론: 설계 이슈

 1. 역사적 맥락
  - JS가 처음 만들어질 때 null은 '객체가 없음'을 나타내기 위해 도입
  - undefined는 나중에 추가되어 '값이 할당되지 않음'을 나타내게 됨

 2. null의 타입이 'object'인 이유
  - 초기 버전에서 값의 타입을 나타내는데 32비트 시스템을 사용
  - 타입 태그로 하위 3비트를 사용했는데, '000'은 객체를 나타냄
  - null은 모든 비트가 0인 특별한 값(null pointer)으로 표현되었고, 이로 인해 객체로 잘못 해석

 3. ECMAScript의 표준화
  - ECMAScript 명세에는 null을 원시 자료형으로 정의
  - 그러나 typeof null의 결과는 역사적인 이유로 "object"를 유지
  - ECMAScript 5 개발 중 이 문제를 수정하려는 시도가 있었지만, 기존 웹 사이트들의 호환성 문제로 인해 받아들여지지 않음

  ```
  typeof null -> "object"
  typeof undefined -> "undefined"

  null == undefined -> true
  null === undefined -> false