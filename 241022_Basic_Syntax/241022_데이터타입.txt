<데이터타입>
JS의 데이터 타입은 크게 두가지로 나뉜다.
- 원시 자료형
 - 변수에 값이 직접 저장되는 자료형 (불변, 값이 복사)
 - Number, String, Boolean, null, undefined

- 참조 자료형 (다음시간부터 진행)
 - 객체의 주소가 저장되는 자료형 (가변, 주소가 복사)
 - Objects (Object, Array, Function)

  *) 두 개 헷갈리지 않게 조심
  Objects -> OOP로써의 객체
  Object -> 데이터 타입의 객체 (딕셔너리와 같은 생김새)


<원시 자료형>
 - Number: 정수 또는 실수형 숫자를 표현하는 자료형
  - 몰랐던 것들: 2.998e8 -> 2.998 *10^8, Infinity -> 양의 무한대, -Infinity -> 음의 무한대,
    NaN -> Not a Number를 나타내는 값

 - String
  - '+' 연산자를 사용해 문자열끼리 결합
  - 뺄셈, 곱셈, 나눗셈 불가능

  - !!! Template literals (템블릿 리터럴) !!!
   - 내장된 표현식을 허용하는 문자열 작성 방식
   - Backtick(``)을 이용하며, 여러 줄에 걸쳐 문자열을 정의할 수도 있고
     JavaScript의 변수를 문자열 안에 바로 연결할 수 있음
   - 표현식은 '$'와 중괄호({expression})로 표기
   = ES6+ 부터 지원

 - null
  - 프로그래머가 의도적으로 '값이 없음'을 나타낼 때 사용
  - let a = null
    console.log(a) // null
 
 - undefined
  - 시스템이나 JavaScript 엔진이 '값이 할당되지 않음'을 나타낼 때 사용
  - let b
    console.log(b) // undefined

 - Boolean
  - 조건문 또는 반복문에서 Boolean이 아닌 데이터 타입은 "자동 형변환 규칙"에 따라 true 또는 false로 변환됨
    (파이썬과 달리 't'와 'f'가 소문자임을 주의)
  - 자동 형변환 (19p)


<연산자>
 - 할당 연산자
  - 오른쪽에 있는 피연산자의 평가 결과를 왼쪽 피연산자에 할당하는 연산자
  - 단축 연산자 지원 (+=, -=, *=, /=, %=)

 - 증가 연산자 ('++')
  - 피연산자를 증가(1을 더함) 시키고 연산자의 위치에 따라 증가하지 전이나 후의 값을 반환
  - x++(후위 연산자) 하면 할당 이후에 더함, ++x(전위 연산자)는 더하고 할당함

 - 감소 연산자 ('--')
  - 피연산자를 감소(1을 뺌)시키고 연산자의 위치에 따라 감소하기 전이나 후의 값을 반환

 *) '+=' 또는 '-='와 같이 더 명시적인 표현으로 작성하는 것을 권장

 - 비교 연산자를
  - 피연산자들(숫자, 문자, Boolean 등)을 비교하고 결과 값을 boolean으로 반환하는 연산자

 - 동등 연산자 ('==')
  - 두 피연산자가 같은 값으로 평가되는지 비교 후 boolean 값을 반환
  - '암묵적 타입 변환'을 통해 타입을 일치시킨 후 같은 값인지 비교
  - 두 피연산자가 모두 같은 객체일 경우 메모리의 같은 객체를 바라보는지 판별
  *) 암묵적 타입 변환이 이루어지므로 권장하지 않는다고 함

  ex) [1] == 1 -> true임
      객체와 원시자료형을 비교할 때 객체의 값을 추출해서 원시 자료형으로 암묵적 타입 변환을 실시하기 때문

 - 일치 연산자 ('===')
  - 두 피연산자의 값과 타입이 모두 같은 경우 true를 반환
  - 같은 객체를 가리키거나, 같은 타입이면서 같은 값인지를 비교
  - !! 엄격한 비교가 이뤄지며 암묵적 타입 변환이 발생하지 않음 !!
  - 특수한 경우를 제외하고는 동등 연산자가 아닌 '일치 연산자' 사용 권장\

 - 논리 연산자
  - and 연산 ('&&')
  - or 연산 ('||')
  - not 연산 ('!')
  - 단축 평가 지원


<조건문>
 - if
  - 조건 표현식의 결과값을 boolean 타입으로 변환 후 참/거짓을 판단
  - 조건은 ()로 감싸야하고 {}에 조건에 따라 실행할 것을 적어야 한다. (실습코드 03 보기)

 - 삼항 연산자 (32p ~ 33p)
  - condition ? expression1 : expression2

  - condition: 평가할 조건 (true 또는 false로 평가)
  - expression1: 조건이 true일 경우 반환할 값 또는 표현식
  - expression2: 조건이 false일 경우 반환할 값 또는 표현식

  - 간단한 조건부 로직을 간결하게 표현할 때 유용
  - 복잡한 로직이나 대다수의 경우에는 ! 가독성이 떨어질 수 있으므로 ! 적절한 상황에서만 사용할 것
  
  ex
  ```
  const age = 20
  const message = (age >= 18) ? '성인' : '미성년자'
  console.log(message) // 성인
  ```