<반복문>
 - while (37p ~ 38p)
  - 조건문이 참이면 문장을 계속해서 수행

  ```
  while (조건문) {

  }
  ```

 - for (39p ~ 41p)
  - 특정한 조건이 거짓으로 판별될 때까지 반복

  ```
  for ([초기문]; [조건문]; [증감문];) {

  }
  ```

  - for 동작원리 (실습코드 04 참고)
   1. 반복문 집인 및 변수 i 선언
   2. 조건문 평가 후 코드 블록 실행
   3. 코드 블록 실행 이후 i 값 증가

 
 - for ...in (42p ~ 44p)
  - 객체의 열거 가능한 속성(property)에 대한 반복
    !!! (자료형으로써의 객체를 말함(파이썬의 딕셔너리 처럼 돼있는 것)) !!!
    (딕셔너리는 순서가 없기 때문에 열거 가능한 속성이라고 하는 것임)
    (('속성'은 딕셔너리의 key라고 생각하면 됨))

    *) JavaScript에서는 딕셔너리라고 하면 안돼고 '객체'라는 자료형이라고 부름

  ```
  for (variable in object) {
    statement
  }
  ```

 - for ...of
  - 반복 가능한 객체(배열, 문자열)에 대해 반복 -> !! 순서가 존재 한다 !!
    !!! (OOP로써의 객체를 말하는 것. for in에서 말하는 자료형으로써의 객체랑 다름) !!!

  ```
  for (variable of iterable) {
    statement
  }  

 *) !!! for ... of는 반복가능한 자료형(iterable) 전용 !!!

    !!! for ... in은 객체(자료형으로써 객체) 전용 !!!
    -> 순서가 중요한 배열에서는 사용하지 않음 (왜? 순서가 보장되지 않으니까. 속성을 그냥 열거할 뿐이다)
       배열에서는 for 문, for ...of를 사용

 !!! <배열 반복과 for ... in> !!!
  - 객체 관점에서 배열의 인덱스는 "정수 이름을 가진 열거 가능한 속성"
  - for ...in은 정수가 아닌 이름과 속성을 포함하여 열거 가능한 모든 속성을 반환
  - 내부적으로 for ...in은 배열의 반복자가 아닌 속성 열거를 사용하기 때문에 특정 순서를 따라 인덱스를 반환하는 것을 보장할 수 없음
  - 객체 관점에서 배열의 인덱스는 정수 이름을 가진 속성이기 때문에 인덱스가 출력됨 (순서 보장 X)

 - 반복문 사용 시 const 사용 여부
  - for 문
   - for (let i = 0; i < arr.length; i++) {...}의 경우에는
     최초 정의한 i를 "재할당"하면서 사용하기 때문에 const를 사용하면 에러 발생

  - for ...in, for ...of
   - 재할당이 아니라, 매 반복마다 다른 속성 이름이 변수에 지정되는 것이므로 const를 사용해도 에러가 발생하지 않음
   - 단, const 특징에 따라 블록 내부에서 변수를 !! 수정할 수 없음 !!

   *) 만약 반복문 안에서 변수의 값을 바꿔야 한다면 let 쓰면 된다. 무조건 const 써야한다. 이런거 아님.
      기본적으로 그렇다는 것

<오프라인 강사님 말>
 - 솔직히 말해서 FE 작업할 때 for문 안쓴다고 함. (굳이? 이런느낌)
 - for ...of는 아예 안쓴다고함. (for ...of는 iterable 순회하는 것)
 - 그럼 배열 순회 어떻게 하나요?
  - Array helper method 쓴다고함 (241024 목에 배운다.)
