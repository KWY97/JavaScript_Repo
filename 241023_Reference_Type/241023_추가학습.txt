push 메서드
 - 배열 끝에 요소를 추가
 
 ```
 const arr = ['첫 번째 항목', '두 번째 항목', '세 번째 항목'];

 arr.push('네 번째 항목');

 console.log(arr); // ['첫 번째 항목', '두 번째 항목', '세 번째 항목', '네 번째 항목']
 ```

unshift 메서드
 - 배열의 맨 처음에 항목을 추가

 ```
 const arr = ['첫 번째 항목', '두 번째 항목', '세 번째 항목'];

 const arrLength = arr.unshift('급한 항목 1', '급한 항목 2');

 console.log(arrLength); // 5 
 console.log(arr); // ['급한 항목 1', '급한 항목 2', '첫 번째 항목', '두 번째 항목', '세 번째 항목']
 ```

*) 추가
pop 메서드
 - 뒤에 삭제

shift 메서드
 - 앞에 삭제

map 메서드 (아래에 한 번 더 정리)
 - 배열 내의 모든 요소에 대해 주어진 callback 함수를 실행한다.
 - 함수의 반환값을 요소로 하는 '새로운 배열'을 만든다.

 ```
 const arr = [2, 4, 6, 8, 10]

 const map = arr.map(a => a + 2)
 console.log(map) -> [4, 6, 8, 10, 12]
 ```

*) 추가
 arr.splice(n, m): 특정 요소 지움 (n: 시작 인덱스, m: 개수)
 - 삭제된 요소 반환이 가능
 ```
 let arr = [1, 2, 3, 4, 5]
 let result = arr.splice(1, 2)

 console.log(arr) -> [1, 4, 5]
 console.log(result) -> [2, 3]
 ```

 arr.splice(n, m, x): 특정 요소 지우고 추가
  ```
 let arr = [1, 2, 3, 4, 5]
 arr.splice(1, 3, 100, 200)

 console.log(arr) -> [1, 100, 200, 5]
 ```

 arr.slice(n, m): 인덱스 n부터 m까지 반환 (m안쓰면 배열 끝까지 반환하고, n,m 둘다 안쓰면 배열이 복사됨)

 arr.reverse(): 역순으로 재정렬


 arr.concat(arr2, arr3 ...): 합쳐서 새배열 반환
 ```
 let arr = [1, 2]
 arr.concat([3, 4]) -> [1, 2, 3, 4]
 arr.concat([3, 4], [5, 6]) -> [1, 2, 3, 4, 5, 6]
 arr.concat([3, 4], 5, 6) -> [1, 2, 3, 4, 5, 6]
 ```

 arr.forEach(fn): 배열 반복
 ```
 let arr = ['Mike', 'Tom', 'Jane']
 arr.forEach((name, index) => {
    console.log(`${index}. ${name}`)
 })
 ```
 실행결과
 0. Mike
 1. Tom
 2. Jane

 arr.includes(): 포함하는지 확인
 ```
 let arr = [1, 2, 3]
 arr.includes(2) -> false
 arr.includes(8) -> true
 ```

 arr.find(fn) / arr.findIndex(fn)
 - 첫 번째 true 값만 반환하고 끝, 만약 없으면 undefined를 반환
 - findIndex는 첫 번째 true인 인덱스를 반환

 ```
 let arr = [1, 2, 3, 4, 5]
 const reslut = arr.find((item) => {
    return item % 2 === 0
 })
 
 console.log(result) -> 2
 ```

 ```
 let userList = [
    { name: "Mike", age: 30 },
    { name: "Jane", age: 27 },
    { name: "Tom", age: 10 }
 ]
 const result = userList.find((uesr) => {
    if (user.age < 19) {
        return true;
    }
    return false;
 })
 ```
 실행결과
 {name: "Tom", age: 10}


 arr.filter(fn): 만족하는 모든 요소를 배열로 반환
 ```
 let arr = [1, 2, 3, 4, 5]
 const reslut = arr.filter((item) => {
    return item % 2 === 0
 })
 
 console.log.(result) -> [2, 4, 6]
 ```

 arr.map(fn)
  - 함수를 받아 특정 기능을 시행하고 새로운 배열을 반환
  ```
  let userList = [
    { name: "Mike", age: 30 },
    { name: "Jane", age: 27 },
    { name: "Tom", age: 10 }
  ]

  let newUserList = userList.map((user, index) => {
    return Object.assign({}, user, {
        isAdult : user.age > 19
    })
  })

  console.log(newUserList)
  ```
  실행결과
  [
    {name: "Mike", age: 30, isAdult: true},
    {name: "Jane", age: 27, isAdult: true},
    {name: "Tom", age: 10, isAdult: false}
  ]

 - reduce 메서드
  - reduce() 메서드는 배열의 각 요소에 대해 주어진 리듀서 (reducer) 함수를 실행하고, 
    하나의 결과값을 반환합니다.
  - total += num이 있다고 생각하자.
   - accumulator는 total, currentValue num 이라고 생각하면 편하다
   - 아래 예시 코드는 초기값 0에 + 1 + 2 + 3 + 4 라서 10이 아웃풋이고
   = 만약 accumulator - currentValue 였다면 - 1 - 2 - 3 - 4 라서 -10이 아웃풋이다.

 ```
 const array1 = [1, 2, 3, 4];

// 0 + 1 + 2 + 3 + 4
const initialValue = 0;
const sumWithInitial = array1.reduce(
  (accumulator, currentValue) => accumulator + currentValue,
  initialValue,
);

console.log(sumWithInitial);
// Expected output: 10
```