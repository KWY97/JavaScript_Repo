<버블링>
 - "한 요소에 이벤트가 발생하면, 이 요소에 할당된 핸들러가 동작하고, 이어서 부모 요소의 핸들러가 동작하는 현상"
 - 가장 최상단의 조상 요소(document)를 만날 때까지 이 과정이 반복되면서 요소 각각에 할당된 핸들러가 동작하고
 - (예시 22p ~ 23p)

 -> 이벤트가 제일 깊은 곳에 있는 요소에서 시작해 부모 요소를 거슬로 올라가며 발생하는 것이 마치 물속 거품과 닮았기 때문

 - 이벤트가 정확히 어디서 발생했는지 접근할 수 있는 방법 (target과 currentTarget이 다른 값 가짐)  
   event.currentTarget, event.target

   'currentTarget' & 'target' 속성
    - currentTarget 속성
     - '현재' 요소
     - 항상 이벤트 핸들러가 연결된 요소만을 참조하는 속성
     - 'this'와 같음

    - target 속성
     - 이벤트가 발생한 가장 안쪽의 요소(target)를 참조하는 속성
     - 실제 이벤트가 시작된 요소
     - 버블링이 진행 되어도 변하지 않음

    (예시 27p ~ 30p)


*) 캡처링과 버블링 - 캡처링은 딱히 중요하지 않다고 함
 - 캡처링: 이벤트가 하위 요소로 전파되는 단계 (버블링과 반대)

 - 캡처링과 버블링 (33p)
  - table의 하위 요소 td를 클릭하면 이벤트는 먼저 최상위 요소부터 아래로 전파됨 (캡처링)
  - 실제 이벤트가 발생한 지점(event.target)에서 실행된 후 다시 위로 전파됨 (버블링)
   - 이 전파 과정에서 상위 요소에 할당된 이벤트 핸들러들이 호출되는 것
  - 캡처링은 실제 개발자가 다루는 경우가 거의 없으므로 버를링에 집중하기

 - 버블링의 필요성 (35p ~ 37p)
  -> 요소의 공통 조상에 이벤트 핸들러를 단 하나만 할당하면, 여러 버튼 요소에서 발생하는 이벤트를 한꺼번에 다룰 수 있음
     공통 조상에 할당한 핸들러에서 event.target을 이용하면 실제 어떤 버튼에서 이벤트가 발생했는지 알 수 있기 때문