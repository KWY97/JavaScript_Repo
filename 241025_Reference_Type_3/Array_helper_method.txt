!!! <Array helper method> !!!
 - 배열 '조작'을 보다 쉽게 수행할 수 있는 특별한 메서드 모음
   (보다 쉽게 수행할 수 있다는 것은 기본적으로 다른 방법으로도 가능하긴 하다는 것)

 - ES6에 도입
 - !!! 배열의 각 요소를 '순회'하며 각 요소에 대해 함수('콜백함수')를 호출 !!! - 잘 기억하기
 - 대표 메서드
  - forEach(), map(), filter(), every(), some(), reduce() 등

 - !! 메서드 호출 시 인자로 함수(콜백함수)를 받는 것이 특징 !!

 - 콜백 함수
  - 다른 함수에 인자로 전달되는 함수
  -> 외부 함수 내에서 호출되어 일종의 루틴이나 특정 작업을 진행

 - 주요 Array Helper Methods
  - forEach
   - 배열 내의 모든 요소 각각에 대해 함수(콜백함수)를 호출
   - ! 반환값 없음 !
  
  - map
   - 배열 내의 모든 요소 각각에 대해 함수(콜백함수)를 호출
   - 함수 호출 결과를 모아 ! 새로운 배열을 반환 !

  1. forEach()
   - 배열의 각 요소를 반복하며 모든 요소에 대해 함수를 호출
   - 구조
    - arr.forEach(callback(item[, index[, array]]))
      (대괄호로 표현된 건 선택인자 라는 뜻)

    - 콜백함수의 3가지 매개변수
     1. item: 처리할 배열의 요소
     2. index: 처리할 배열 요소의 인덱스 (선택인자)
     3. array: forEach를 호출한 배열 (선택인자)

    -> 반환값 undefined

    ```
    const names = ['Alice', 'Bella', 'Cathy']

    // 일반 함수 표기
    names.forEach(function (name) {
      console.log(name)
    })
    
    // 화살표 함수 표기
    names.forEach((name) => {
      console.log(name)
    })

    // 활용
    names.forEach((name, index, array) => {
      console.log(name, index, array)
    }) 
    ```

    *) 사용하기 싫은 인자가 있으면 '_'로 처리하면됨
    ex) index만 쓰고 싶은 경우
    ```
    names.forEach((_, index) => {
      console.log(index)
    })
    ``` 

  2. map()
   - 배열의 모든 요소에 대해 함수를 호출하고, 반환된 호출 결과 값을 모아 새로운 배열을 반환
   - 구조
    - arr.map(callback(item[, index[, array]]))
    - forEach의 매개 변수와 동일
    - 반환 값
     - 배열의 각 요소에 대해 실행한 'callback의 결과를 모은 새로운 배열'
     -> forEach의 동작 원리와 같지만 forEach와 달리 `새로운 배열을 반환함`

    ```
    const result2 = persons.map(function (person) {
      // return이 없으면 [undefined, undefined]
      return person.name
    })
    console.log(result2) // ['Alice', 'Bella']
    ```
    !! 위 예시 기준 return이 없으면 [undefined, undefined] !!


 배열 순회 종합
  for loop
   - 배열의 인덱스를 이용하여 각 요소에 접근
   - break, continue 사용 가능

  for ...of
   - 배열 요소에 바로 접근 가능
   - break, continue 사용 가능

  forEach() - ! 사용 권장 !
   - 간결하고 가독성이 높음
   - callback 함수를 이용하여 각 요소를 조작하기 용이
   - break, continue 사용 불가

 기타 Array Helper Methods (41p)
  - filter
   - 콜백 함수의 반환 값이 참인 요소들만 모아서 새로운 배열을 반환

  - find
   - 콜백 함수의 반환 값이 참이면 해당 요소를 반환

  - some
   - 배열의 요소 중 적어도 하나라도 콜백 함수를 통과하면 true를 반환하며 즉시 배열 순회 중지
   - 모두 통과하지 못하면 false를 반환 (이런 특징을 잘 살리면 break 처럼 쓸 수 있다.)

  - every
   - 배열의 모든 요소가 콜백 함수를 통과하면 true를 반환
   - 하나라도 통과하지 못하면 즉시 false를 반환하고 중지 (이런 특징을 잘 살리면 break 처럼 쓸 수 있다.)
 
 배열 with '전개 구문'
  ```
  // 배열 복사 (with 전개 구문)
  let parts = ['어깨', '무릎']
  let lyrics = ['머리', ...parts, '발']

  console.log(lyrics) // [ '머리', '어깨', '무릎', '발' ]
  ```