<Callback과 Promise>
 - 비동기 처리의 특성과 관리
  - 비동기 처리의 핵심은 작업이 시작되는 순서가 아니라 
    완료되는 순서(=Task Queue로 들어가는 순서)에 따라 처리된다는 것

 - 비동기 처리의 어려움
  - 개발자 입장에서 '코드의 실행 순서가 불명확'하다는 단점 존재
  - 이로 인해 실행 결과를 정확히 예측하며 코드를 작성하기 어려울 수 있음

 - 비동기 처리 관리 방법 (코드의 실행 순서를 보장하는 방법)
  1. 비동기 콜백
   - 비동기 작업이 완료된 후 실행될 함수를 미리 정의

  2. Promise
   - 비동기 작업의 최종 완료 또는 실패를 나타내는 객체

 - 비동기 콜백 (81p ~ 84p)
  - 비동기적으로 처리되는 작업이 완료되었을 때 실행되는 함수
  - 연쇄적으로 발생하는 비동기 작업을 순차적으로 동작할 수 있게함
  -> 작업의 순서와 동작을 제어하거나 결과를 처리하는데 사용

  한계
   - 콜백 지옥 발생 (83p 예시)

  - 콜백 함수는 비동기 작업을 순차적으로 실행할 수 있게 하는 반드시 필요한 로직
  - 비동기 코드를 작성하다 보면 콜백 함수로 인한 콜백 지옥은 빈번히 나타나는 문제이며
    이는 코드의 가독성을 해치고 유지 보수가 어려워짐
  -> 지옥에 빠지지 않는 다른 표기 형태가 필요하다 !

 - Promise (85p ~ 97p)
  - JavaScript에서 비동기 작업의 결과는 나타내는 객체
  -> 비동기 작업이 완료되었을 때 결과 값을 반환하거나, 실패 시 에러를 처리할 수 있는 기능을 제공

  - JavaScript에서 비동기 작업을 처리하기 위한 객체
  - 비동기 작업의 성공 또는 실패와 관련된 결과나 값을 나타냄
  - 콜백 지옥 문제를 해결하기 위해 등장한 비동기 처리를 위한 객체
  - "작업이 끝나면 실행 시켜줄게" 라는 약속
  -> Promise 기반의 HTTP 클라이언트 라이브러리가 바로 Axios

  - ! then & catch의 chaining ! (아주 큰 강점)
   - axios로 처리한 비동기 로직은 항상 promise 객체를 반환
   - 즉, then과 catch는 모두 항상 promise 객체를 반환 -> 계속해서 chaining을 할 수 있음
   - then을 계쏙 이어나가면서 작성할 수 있게됨

   then 메서드 chaining의 목적
    - 비동기 작업의 '순차적인' 처리 가능
    - 코드를 보다 직관적이고 가독성 좋게 작성할 수 있도록 도움

   then 메서드 chaining의 장점 (93p)
    1. 가독성
    2. 에러 처리
    3. 유연성
    4. 코드관리

   Promise가 제공하는 이점 (비동기 콜백과 비교) (94p ~ 96p)
    1. 실행 순서의 보장
     - 콜백 함수: JavaScript의 Event Loop가 현재 실행 중인 Call Stack을 완료하기 전에는 호출되지 않음
       Promise: then/catch 메서드의 콜백 함수는 Task Queue에 배치되는 순서대로 엄격하게 호출됨

       -> 이는 비동기 작업의 실행 순서를 더 예측 가능하게 만듬

    2. 유연한 비동기 처리
     - Promise는 비동기 작업이 완료된 후에도 then 메서드를 통해 콜백을 추가할 수 있음
       (return이 있어야함)

    3. 체이닝을 통한 연속적인 비동기 처리
     - then 메서드를 여러 번 연결하여 여러 개의 콜백 함수를 순차적으로 실행할 수 있음
     - 각 콜백은 주어진 순서대로 실행되며, 이전 Promise의 결과를 다음 then에서 사용할 수 있음
     - 복잡한 비동기 로직을 명확하게 표현할 수 있음

    4. 에러 처리의 일원화
     - catch 메서드를 통해 Promise 체인 전체의 에러를 한 곳에서 처리할 수 있음
     - 전통적인 콜백 방식에서 각 콜백마다 에러 처리를 해야하는 번거로움을 해소

  ! Promise 정리 !
   - Promise는 비동기 프로그래밍의 복잡성을 줄이고, 코드의 가독성과 유지보수성을 높이는 강력한 도구
   - 실행 순서 보장, 체이닝, 에러 처리 등의 특징을 통해 콜백 지옥을 피하고 더 체계적인 비동기 코드 작성을 가능하게함