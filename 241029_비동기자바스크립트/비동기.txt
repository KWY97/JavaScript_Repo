<들어가기 전 - 동기>
 - 동기(Synchronous)
  - 프로그램의 실행 흐름이 순차적으로 실행
  -> 하나의 작업이 완료된 후에 다음 작업이 실행되는 방식


!!! <비동기> !!!
 - 비동기(Asynchronous)
  - 특정 작업의 실행이 완료될 때까지 기다리지 않고 다음 작업을 즉시 실행하는 방식
  -> 작업의 완료 여부를 신경쓰지 않고 동시에 다른 작업들을 수행할 수 있음

  - 특징
   - 병렬적 수행
   - 당장 처리를 완료할 수 없고 시간이 필요한 작업들은 백그라운드에서 실행되며
     빨리 완료되는 작업부터 처리


<JavaScript와 비동기>
 - Single Thread 언어, JavaScript
  - Thread란?
   - 작업을 처리할 때 '실제로 작업을 수행하는 주체'
     multi-thread라면 업무를 수행할 수 있는 주체가 여러 개라는 의미

 - JavaScript는 한 번에 여러 일을 수행할 수 없다.
  - JavaScript는 한 번에 하나의 일만 수행할 수 있는 Single Thread 언어이다.
  - 즉, JavaScript는 하나의 작업을 요청한 순서대로 처리할 수 밖에 없음
  -> 그런데 어떻게 '비동기 처리'를 할 수 있나 ?
     -> JavaScript는 수행되는 환경의 도움이 필요하다.

<JavaScript Runtime>
 - JavaScript가 동작할 수 있는 환경(Runtime)
  - '브라우저' 또는 'Node.js' (우리가 브라우저에서 수행 중)

 - JavaScript는 Single Thread이므로 비동기 처리를 할 수 있도록 ! 도와주는 환경 ! 이 필요

 - 브라우저 환경에서 JavaScript 비동기 처리 관련 요소 (비동기 처리를 위한 어떤 영역이 존재하는가)
  1. JavaScript Engine의 Call Stack
  2. Web API
  3. Task Queue
  4. Event Loop

 - 런타임의 시각적 표현 (23p ~ 38p)
  [내가 적은 설명 - 피피티 자료랑 같이 보면서 이해하기]

  Console.log가 수행이 되면
  JavaScript의 환경 입장에서는 Console.log를 Call Stack에 집어 넣음
  Call Stack에서 나오면서 호출이 된다.
  Call Stack이 비어진다.

  setTimeout의 경우는 처리에 시간이 걸리니까 Web API에 보낸다.
  Call Stack이 비어진다.

  다음 수행이 Call Stack에 쌓인다.
  처음과 똑같이 수행된다.

  Web API에서 setTimeout이 처리가 완료되면 Task Queue로 가서 대기를 하게된다.
  Web API가 비워진다.

  Event Loop가 Call Stack과 Task Queue를 모니터링하는데
  Call Stack이 비었고 Task Queue에 대기가 있으면 Task Queue에 대기하고 있던 작업을
  Call Stack에 넣는다.
  처음과 똑같이 수행된다.

 - 브라우저 환경에서의 JavaScript 비동기 처리 동작 방식
  [PPT에 적힌 설명]
  1. 모든 작업은 Call Stack(LIFO)으로 들어간 후 처리된다.
  2. 오래 걸리는 작업이 Call Stack으로 들어오면 Web API로 보내 별도로 처리하도록 한다.
  3. Web API에서 처리가 끝난 작업들은 곧바로 Call Stack으로 들어가지 못하고 Task Queue(FIFO)에 순서대로 들어간다.
  4. Event Loop가 Call Stack이 비어 있는 것을 계속 체크하고 Call Stack이 빈다면 Task Queue에서
     가장 오래된(가장 먼저 처리되어 들어온) 작업을 Call Stack으로 보낸다.

 - 비동기 처리 동작 요소
  1. Call Stack
   - 요청이 들어올 때 마다 순차적으로 처리하는 Stack(LIFO)
   - 기본적인 JavaScript의 Single Thread 작업 처리
   (JavaScript의 일꾼은 하나다 == Call Stack이 하나다.)

  2. Web API
   - JavaScript 엔진이 아닌 '브라우저'에서 제공하는 Runtime 환경
   - 시간이 소요되는 작업을 처리 (setTimeout, DOM Event, 비동기 요청 등)

  3. Task Queue (Callback Queue)
   - 비동기 처리된 Callback 함수가 대기하는 Queue(FIFO)

  4. Event Loop
   - Task(작업)가 들어오길 기다렸다가 Task가 들어오면 이를 처리하고,
     처리할 태스크가 없는 경우엔 잠드는, 끊임없이 돌아가는 자바스크립트 내 루프
   - Call Stack과 Task Queue를 지속적으로 모니터링
   - Call Stack이 비어 있는지 확인 후 비어 있다면 Task Queue에서 대기 중인 오래된 작업을 Call Stack으로 Push

   *) 앞의 시각적 표현 예시를 보면 과연 'Work'는 3초 뒤에 Output으로 나오는 것이 보장될까?
      -> !! 그게 아님 !! 3초뒤에 Task Queue(대기열)로 간다는 말임.
         이를 해결하기 위한 것이 뒤에 나옴.

 - 정리
  - JavaScript는 한 번에 하나의 작업을 수행하는 Single Thread 언어로 동기적 처리를 진행
  - 하지만 브라우저 환경에서는 Web API에서 처리된 작업이 지속적으로 Task Queue를 거쳐
    Event Loop에 의해 Call Stack에 들어와 순차적으로 실행됨으로써 비동기 작업이 가능한 환경이 됨

 -> 이러한 기술들을 통칭하는 것이 Ajax(에이잭스)라고 함