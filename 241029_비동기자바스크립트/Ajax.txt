<Ajax> - Asynchronous JavaScript and XML
 - 비동기적인 웹 애플리케이션 개발을 위한 기술
   (특정 기술을 지칭하는 것이 아님, 비동기적인 개발을 위한 일련의 기술을 통칭하는 것)

 - 정의
  - XMLHttpRequest(XML) 기술을 사용해 복잡하고 동적인 웹 페이지를 구성하는 프로그래밍 방식
  - 브라우저와 서버 간의 데이터를 비동기적으로 교환하는 기술
  - Ajax를 사용하면 페이지 전체를 새로고침하지 않고도 동적으로 데이터를 불러와 화면을 갱신할 수 있음
  - Ajax의 'x'는 XML이라는 데이터 타입을 의미하긴 하지만, 요즘은 더 가벼운 용량과
    JavaScript의 일부라는 장점 때문에 JSON을 많이 사용

 - 목적
  1. ! 비동기 통신 !
   - !! 웹 페이지 전체를 새로고침하지 않고 서버와 데이터를 주고받을 수 있음 !!

  2. 부분 업데이트
   - 전체 페이지가 다시 로드되지 않고 HTML 페이지 일부 DOM만 업데이트
   - 페이지의 일부분만 동적으로 갱신할 수 있어 사용자 경험이 향상

  3. 서버 부하 감소
   - 필요한 데이터만 요청하므로 서버의 부하를 줄일 수 있음


 - 기존 기술과의 차이 (51p ~ 52p)
  - 기존 방식
   1. 클라이언트(브라우저)에서 form을 채우고 이를 서버로 제출(submit)
   2. 서버는 요청 내용에 따라 데이터 처리 후 '새로운 웹페이지'를 작성하여 응답으로 전달

   -> 결과적으로 모든 요청에 따라 새로운 페이지를 응답 받기 때문에 계속해서 새로고침이 발생
   -> 기존 페이지와 유사한 내용을 가지고 있는 경우 중복된 코드를 다시 전송 받음으로써 대역폭을 낭비하게 되는 경우가 많음

  - Ajax 방식
   1. XHR 객체 생성 및 요청

    - XMLHttpRequest 객체 (XHR)
    - 웹 브라우저와 서버 간의 비동기 통신을 가능하게 하는 JavaScript 객체

    - XMLHttpRequest 주요 기능
     - JavaScript를 사용하여 서버에 HTTP 요청을 할 수 있는 객체
     - 웹 페이지의 전체 새로고침 없이도 서버로부터 데이터를 가져오거나 보낼 수 있음
     -> 이름에 XML이라는 데이터 타입이 들어가긴 하지만 XML 뿐만 아니라 모든 종류의 데이터를 가져올 수 있음


   2. 서버는 새로운 페이지를 응답으로 만들지 않고 '필요한 부분에 대한 데이터'만 처리 후 응답
      (JSON 및 기타 데이터)
   -> 새로운 페이지를 받는 것이 아닌 필요한 부분의 데이터만 받아 기존 페이지의 일부를 수정 (새로고침 X)
   -> 서버에서 모두 처리되던 데이터 처리의 일부분이 이제는 클라이언트 쪽에서 처리되므로 교환되는 데이터양과 처리량이 줄어듬


 - 이벤트 핸들러는 비동기 프로그래밍의 한 형태
  - 이벤트가 발생할 때마다 호출되는 함수(콜백 함수)를 제공하는 것
    (콜백함수는 모두 비동기적으로 처리됨)
  - HTTP 요청은 응답이 올때까지의 시간이 걸릴 수 있는 작업이라 비동기이며, 이벤트 핸들러를 XHR 객체에 연결해
    요청의 진행 상태 및 최종 완료에 대한 응답을 받음


!!! <Axios> !!! - 아주 중요하다. (오늘 시간 이후로 쭉 쓴다.)
 - 브라우저와 Node.js에서 사용할 수 있는 Promise 기반의 HTTP 클라이언트 라이브러리

 - Axios 정의 및 특징
  - 클라이언트 및 서버 사이에 HTTP 요청을 만들고 응답을 처리하는데 사용되는 자바스크립트 라이브러리
  - 서버와의 HTTP 요청과 응답을 간편하게 처리할 수 있도록 도와주는 도구
  - 브라우저를 위한 XHR 객체 생성
  - 간편한 API를 제공하며, Promise 기반의 비동기 요청을 처리
  - > 주로 웹 애플리케이션에서 서버와 통신할 때 사용

 - Ajax를 활용한 클라이언트 서버 간 동작 (57p - 그림을 머리 속에 잘 넣기)
  1. XHR 객체 생성 및 요청(client)
  2. 응답 데이터 생성(server)
  3. JSON 데이터 응답(server)
  4. Promise 객체 데이터를 활용해 DOM 조작(client)
     (웹 페이지의 일부분만을 다시 로딩)

 - 'Promise' object
  - 자바스크립트에서 비동기 작업을 처리하기 위한 객체
  - 비동기 작업의 최종 완료(또는 실패)와 그 결과 값을 나타냄

  - 주요 메서드
   - then(): 작업이 성공적으로 완료되었을 때 실행될 콜백 함수를 지정
   - catch(): 작업이 실패했을 때 실행될 콜백 함수를 지정

   - 성공 처리
    - then 메서드를 사용해서 "성공했을 때 수행할 로직"을 작성
    - 서버로부터 받은 응답 데이터를 처리

   - 실패 처리
    - catch 메서드를 사용해서 "실패했을 때 수행할 로직"을 작성
    - 네트워크 오류나 서버 오류 등의 예외 상황을 처리

 - then & catch 특징
  - then(callback)
   - 요청한 작업이 성공하면 callback 실행
   - callback은 이전 작업의 성공 결과를 인자로 전달 받음

  - catch(callback)
   - then()이 하나라도 실패하면 callback 실행 (남은 then 중단)
   - callback은 이전 작업의 실패 객체를 인자로 전달 받음


<Ajax와 Axios 정리>
 - Ajax
  - 하나의 특정한 기술을 의미하는 것이 아니라, 비동기적인 웹 애플리케이션 개발에 사용하는 기술들의 집합을 지칭

 - Axios (라이브러리)
  - 클라이언트 및 서버 사이에 HTTP 요청을 만들고 응답을 처리하는데 사용되는 자바스크립트 라이브러리
  - Promise API를 기반으로하여 비동기 처리를 더 쉽게 할 수 있음

 -> 프론트엔드에서 Axios를 활용해 DRF로 만든 API 서버로 요청을 보내고, 받아온 데이터를 비동기적으로 처리하는 로직을 작성하게 됨

  Ajax는 개념이자 접근 방식이며, Axios는 이를 실현하는 구체적인 도구
  Axios는 Ajax를 구현하는 도구 중 하나로, XMLHttpRequest를 추상화하여 더 사용하기 쉽게 만든 라이브러리
   