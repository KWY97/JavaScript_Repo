<DOM 속성 확인 Tip>
 - 개발자도구 - Elements - Properties
 - 선택한 해당 요소의 모든 DOM 속성 확인 가능

<Node>
 - DOM의 기본 구성 단위
 - DOM 트리의 각 부분은 Node라는 객체로 표현됨
  - Document Node: HTML 문서 전체를 나타내는 노트
  - Element Node: HTML 요소를 나타내는 노드 (예를 들어 <P>)
  - Text Node: HTML 텍스트 (Element Node 내의 텍스트 컨텐츠를 나타냄)
  - Attribute Node: HTML 요소의 속성을 나타내는 노드

<NodeList>
 - DOM 메서드를 사용해 선택한 Node의 목록
 - 배열과 유사한 구조를 가짐
 - Index로만 각 항목에 접근 가능
 - JavaScript의 배열 메서드 사용 가능
 - querySelectorAll()에 의해 반환되는 NodeList는 DOM의 변경사항을 실시간으로 반영하지 않음
  - DOM이 나중에 변경되더라도 이전에 이미 선택한 NodeList 값은 변하지 않음

<Element>
 - Node의 하위 유형
 - Element는 DOM 트리에서 HTML 요소를 나타내는 특별한 유형의 Node
 - 예를 들어, <p>, <div>, <span>, <body> 등의 HTML 태그들이 Element 노드를 생성
 - Node의 속성과 메서드를 모두 가지고 있으며 추가적으로 요소 특화된 기능을 가지고 있음
   (ex. className, innetHTML, id 등)
 -> 모든 Element는 Node이지만, 모든 Node가 Element인 것은 아님

<Parsing> - 구문 분석, 해석
 브라우저가 문자열을 해석하여 DOM Tree로 만드는 과정

<세미콜론>
 - 자바스크립트는 문장 마지막 세미콜론(';')을 선택적으로 사용 가능
 - 세미콜론이 없으면 ASI에 의해 자동을 세미콜론이 삽입됨
   (ASI (Automatic Semicolon Insertion), 자동 세미콜론 삽입 규칙)
 - JavaScript를 만든 Brendan Eich 또한 세미콜론 작성을 반대

<변수 선언 키워드 - var>
 - ES6 이전에 변수 선언에 사용했던 키둬
 - 재할당 가능
 - 재선언 가능
 - 함수 스코프(function scope)를 가짐
   (즉, 함수가 아니면 모두 전역변수가 된다는 말 -> 자유도가 너무 높아 변수의 변화를 추적하기 너무 어려웠다)
 - '호이스팅'되는 특성으로 인해 예기치 못한 문제 발생 가능
   (선언하기 전 사용할 수 있음)
 - 변수 선언 시 var, const, let 키워드 중 하나를 사용하지 않으면 자동으로 var로 선언됨

<호이스팅>
 - 변수 선언이 끌어올려지는 현상
  - var로 선언한 변수는 선언 위치와 상관없이 함수 시작 지점, 전역에서는 코드가 시작될 때 처리됨
  - 변수에 무언가를 할당하기 전까지 undefined를 가짐
 - let과 const로 선언된 변수도 기술적으로는 호이스팅 되지만, 변수가 만들어지는 내부 과정이 다르기 때문에 이 문제를 방지할 수 있음
   (TDZ(Temporal Dead Zone)로 인해 초기화 전에 접근할 수 없음)

   (JS는 실행이 될 때 변수의 선언을 일단 모두 끌어올림, 모두 호이스팅한다. -> 근데 var는 선언과 초기화가 동시에 일어난다.)
   (그래서 무언가를 할당하기 전까지 undefiend 가지는 것)

    근데 let과 const는 왜 undefiend 안가지는가? 
    선언, 초기화, 할당이 3단계로 나눠서 이루어지기 때문에
    JS가 선언을 끌어올려도 초기화, 할당은 이루어지지 않아서 접근은 X

    그 중간 영역을 TDZ라고 함