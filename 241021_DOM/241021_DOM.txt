<변수>
 *) JavaScript 문법 학습 (ECMAScript 2015(ES6) 이후의 명제를 따름)
 권장 스타일 가이드: https://standardjs.com/rules-kokr.html

 - 변수 선언 키워드 3가지
  1. let (30p)
   - 블록 스코프를 갖는 지역 변수를 선언
   - !!!! 재할당 가능 !!!!
   - 재선언 불가능
   - ES6에서 추가

  2. const (선언 시 반드시 초기값 설정 필요, 빈 값 안됨)
   - 블록 스코프를 갖는 지역 변수를 선언
   - !!!! 재할당 불가능 !!!!
   - 재선언 불가능
   - ES6에서 추가

 let과 const의 가장 중요한 차이 (시험 삘)
 !!! 재할당 여부 !!!
 !!! 초기값 설정 여부 !!!!
 (ex. let number 이건 되는데 const number 이건 안댐, const number = 10 이런식으로 해야댐)
 let은 선언 시 초기값이 없다면 'undefiend'가 초기화 시 할당된다.

 -> 기본적으로 변수 선언 시 const를 사용해야한다.
    필요한 경우에만 let으로 전환
     - 재할당이 필요한 경우
     - let을 사용하는 것은 해당 변수가 의도적으로 변경될 수 있음을 명확히 나타냄
     - 코드의 유연성을 확보하면서도 const의 장점을 최대한 활용할 수 있음

    const를 기본으로 사용해야 하는 이유
     1. 코드의 의도 명확화
      - 해당 변수가 재할당되지 않을 것임을 명확히 표현
      - 개발자들에게 변수의 용도와 동작을 더 쉽게 이해할 수 있게 해줌

     2. 버그 예방
      - 의도치 않은 변수 값 변경으로 인한 버그를 예방
      - 큰 규모의 프로젝트나 팀 작업에서 중요
   
 - 변수 작성 규칙
  1. 반드시 문자, 달러('$') 또는 밑줄('_')로 시작
  2. 대소문자를 구분
  3. 예약어 사용 불가 (for, if, function 등)

 - 식별자(변수명) Naming case
  1. 카멜 케이스 (camelCase) - 대부분 카멜 케이스
   - 변수, 객체, 함수에 사용
  
  2. 파스칼 케이스 (PascalCase)
   - 클래스, 생성자에 이용

  3. 대문자 스네이크 케이스 (SNAKE_CASE)
   - 상수(constants)에 사용
   *) 파이썬 처럼 소문자 스네이크 케이스 쓰지 않는다.

 - 블록 스코프 (33p)
  - if, for, 함수 등의 '중괄호({}) 내부'를 가리킴
  - 블록 스코프를 가지는 변수는 블록 바깥에서는 접근 불가능
 

<DOM>
 - 웹 브라우저에서의 JavaScript
  - 웹 페이지의 동적인 기능을 구현

 - JavaScript 실행 환경 종류
  1. HTML script 태그
  2. js 확장자 파일
  3. 브라우저 Console (모든 브라우저에서 동일하게 동작)

  -> 우리는 문서를 조작하는 JavaScript를 쓸거라 주로 1번 환경에서 실행한다.

 DOM
  웹 페이지(Document)를 구조화된 객체로 제공하여 프로그래밍 언어가 페이지 구조에 접근할 수 있는 방법을 제공
  -> 문서 구조, 스타일, 내용 등을 변경할 수 있도록 함

  DOM API
   - 다른 프로그래밍 언어가 웹 페에지에 접근 및 조작할 수 있도록
     페이지 요소들을 객체 형태로 제공하며 이에 따른 메서드 또한 제공

  !!! document 객체 !!!
   - 웹 페이지 객체
   - DOM Tree의 진입점
   - 페이지를 구성하는 모든 객체 요소를 포함

   - DOM에서 모든 요소, 속성, 텍스트는 하나의 객체
   - 모두 documnet 객체의 하위 객체로 구성됨

  DOM Tree
   HTML 태그를 나타내는 elements의 node는 문서의 구조를 결정
   이들은 다시 자식 node를 가질 수 있음 (ex. document.body)
   -> 객체 간 상속 구조가 존재

  ! DOM의 핵심 !
   문서의 요소들을 객체로 제공하여 다른 프로그래밍 언어에서 접근하고 조작할 수 있는 방법을 제공하는 API
    
  DOM 선택
   DOM 조작 시 기억해야할 것
    1. 조작 하고자 하는 요소를 '선택(또는 탐색)'
    2. 선택된 요소의 콘텐츠 또는 속성을 '조작'

    선택 메서드
     document.querySelector()
      - 요소 한 개 선택
      - 제공한 선택자와 일치하는 element 한 개 선택
      - 제공한 선택자를 만족하는 첫 번째 element 객체를 반환 (없다면 null 반환)

     document.querySelectorAll()
      - 요소 여러개 선택
      - 제공한 선택자와 일치하는 여러 element를 선택
      - 제공한 선택자를 만족하는 NodeList를 반환

   *)  querySelector()는 CSS 선택자를 기반으로 요소를 선택하는데, 
       id나 class 선택자를 사용하려면 
       #id, .class 형식을 사용해야 한다.

  DOM 조작
   1. 속성 조작
    - 클래스 속성 조작
     - 'classList' property
      요소의 클래스 목록을 DOMTokenList(유사 배열) 형태로 반환

     - element.classList.add()
      - 지정한 클래스 값을 추가

     - element.classList.remove()
      - 지정한 클래스 값을 제거

     - element.classList.toggle()
      - 클래스가 존재한다면 제거하고 false를 반환
        (존재하지 않으면 클래스를 추가하고 true를 반환)

    - 일반 속성 조작
     - Element.getAttribute()
      - 해당 요소에 지정된 값을 반환 (조회)
      
     - Element.setAttribute(name, value)
      - 지정된 요소의 속성 값을 설정
      - 속성이 이미 있으면 기존 값을 갱신 (그렇지 않으면 지정된 이름과 값으로 새 속성이 추가)

     - Element.removeAttribute()
      - 요소에서 지정된 이름을 가진 속성 제거


   2. HTML 콘텐츠 조작
    - 'textContent' property
     요소의 텍스트 콘텐츠를 표현


   3. !!! DOM 요소 조작 !!!
    - document.createElement(tagName) - 생성
     - 작성한 tagName의 HTML 요소를 생성하여 반환

    - Node.appendChild() - 추가
     - 한 Node를 특정 부모 Node의 자식 NodeList 중 마지막 자식으로 삽입
     - 추가된 Node 객체를 반환

    - Node.removeChild() - 삭제
     - DOM에서 자식 Nodem를 제거
     - 제거된 Node를 반환


   4. 스타일 조작
    - 'style' property
     해당 요소의 모든 style 속성 목록을 포함하는 속성
