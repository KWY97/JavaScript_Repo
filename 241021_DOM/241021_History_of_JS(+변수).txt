<History of JavaScript> - 가볍게 들으면 된다.
 - 웹 브라우저와 JavaScript
  - 초기의 웹
    - 정적인 텍스트 페이지만을 지원 (NetScape 社가 독점)
    - 동적인 기능개발을 위해 NetScape 社에서 Mocha라는 스크립트 언어가 개발함
    - 이후 이름을 LiveScript로 변경 했으나 인기가 없어서 인기있던 프로그래밍 언어인
      Java의 명성에 기대보고자 JavaScript로 이름을 변경        
      (그 후 마이크로소프트가 자체 웹 브라우저(인터넷 익스플로러, IE)에 JavaScript와 유사한 언어인
       JScript를 도입 -> 이 과정에서 많은 회사들이 독자적으로 JavaScript를 변경해서 자체 스크립트 언어 개발)

    - 그 후 NetScape와 Microsoft가 경쟁했는데 Microsoft가 승리 
      (이유: Window 운영체제가 있었고 인터넷 익스플로러를 윈도우 운영체제에 내장해서 무료로 배포했기 때문에)

    JavaScript의 파편화를 막기 위해서 ECMA(정보와 통신 시스템을 위한 국제적 표준화 기구)에서 ECMAScript(JavaScript 기반)라는 표준 언어를 정의하여 발표(1997)
    하지만 IE는 높은 점유율을 가지고 있어서 독자적인 규격 유지함
    -> 그러다가 Chrome이 등장했는데 Chrome은 표준을 잘 지킴 그래서 다 재끼고 짱먹음
       (웹 표준을 준수함으로써, 성능이 빨랐으며, 호환성이 뛰어났고, 개발자 도구를 제공해서 인기가 많았음)

 - ECMAScript와 JavaScript
  - !! Ecma International이 정의하고 있는 표준화된 스크립트 프로그래밍 언어 '명세' !!
       (스크립트 언어가 준수해야 하는 규칙, 세부사항 등을 제공)
    !! JavaScript는 ECMAScript 표준을 구현한 구체적인 프로그래밍 '언어' !!

    [ECMA Script의 역사]
    ECMAScript 5(ES5)에서 안정성과 생산성을 크게 높임 (2009)
    ECMAScript 2015(ES6)에서 객체지향 프로그래밍 언어로써 많은 발전을 이루어, 역사상 가장 중요한 버전으로 평가됨(2015)

    [JavaScript의 현재]
    Node.js(2009 출시)로 인해 브라우저 외부에서도 실행 가능해져 서버 사이드 개발에도 사용되기 시작함
    (쉽게 말해 Node.js라는 백엔드 환경이 등장함으로써 스크립트 언어가 아닌 프로그래밍언어로 평가받기 시작함)

    다양한 프레임워크와 라이브러리들이 개발되면서, 웹 개발 분야에서는 필수적인 언어로 자리잡게됨


<변수>
 *) JavaScript 문법 학습 (ECMAScript 2015(ES6) 이후의 명제를 따름)
 권장 스타일 가이드: https://standardjs.com/rules-kokr.html

 - 변수 선언 키워드 3가지
  1. let (30p)
   - 블록 스코프를 갖는 지역 변수를 선언
   - !!!! 재할당 가능 !!!!
   - 재선언 불가능
   - ES6에서 추가

  2. const (선언 시 반드시 초기값 설정 필요, 빈 값 안됨)
   - 블록 스코프를 갖는 지역 변수를 선언
   - !!!! 재할당 불가능 !!!!
   - 재선언 불가능
   - ES6에서 추가

 let과 const의 가장 중요한 차이 (시험 삘)
 !!! 재할당 여부 !!!
 !!! 초기값 설정 여부 !!!!
 (ex. let number 이건 되는데 const number 이건 안댐, const number = 10 이런식으로 해야댐)
 let은 선언 시 초기값이 없다면 'undefiend'가 초기화 시 할당된다.

 -> 기본적으로 변수 선언 시 const를 사용해야한다.
    필요한 경우에만 let으로 전환
     - 재할당이 필요한 경우
     - let을 사용하는 것은 해당 변수가 의도적으로 변경될 수 있음을 명확히 나타냄
     - 코드의 유연성을 확보하면서도 const의 장점을 최대한 활용할 수 있음

    const를 기본으로 사용해야 하는 이유
     1. 코드의 의도 명확화
      - 해당 변수가 재할당되지 않을 것임을 명확히 표현
      - 개발자들에게 변수의 용도와 동작을 더 쉽게 이해할 수 있게 해줌

     2. 버그 예방
      - 의도치 않은 변수 값 변경으로 인한 버그를 예방
      - 큰 규모의 프로젝트나 팀 작업에서 중요
   
 - 변수 작성 규칙
  1. 반드시 문자, 달러('$') 또는 밑줄('_')로 시작
  2. 대소문자를 구분
  3. 예약어 사용 불가 (for, if, function 등)

 - 식별자(변수명) Naming case
  1. 카멜 케이스 (camelCase) - 대부분 카멜 케이스
   - 변수, 객체, 함수에 사용
  
  2. 파스칼 케이스 (PascalCase)
   - 클래스, 생성자에 이용

  3. 대문자 스네이크 케이스 (SNAKE_CASE)
   - 상수(constants)에 사용
   *) 파이썬 처럼 소문자 스네이크 케이스 쓰지 않는다.

 - 블록 스코프 (33p)
  - if, for, 함수 등의 '중괄호({}) 내부'를 가리킴
  - 블록 스코프를 가지는 변수는 블록 바깥에서는 접근 불가능

 